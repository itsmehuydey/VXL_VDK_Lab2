
LAB2_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf8  08002cf8  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf8  08002cf8  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf8  08002cf8  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000038  08002d38  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002d38  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087da  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001580  00000000  00000000  0002883b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  00029dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010bf  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009819  00000000  00000000  0002c0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082313  00000000  00000000  00035900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b7c13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000b7c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cbc 	.word	0x08002cbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002cbc 	.word	0x08002cbc

0800014c <setTimer0>:
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;
int TIMER_CYCLE	= 10;

void setTimer0(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration  / TIMER_CYCLE;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	2000000c 	.word	0x2000000c
 8000178:	20000054 	.word	0x20000054
 800017c:	20000058 	.word	0x20000058

08000180 <setTimer1>:
void setTimer1(int duration){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration  / TIMER_CYCLE;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	20000060 	.word	0x20000060

080001b4 <setTimer2>:
void setTimer2(int duration){
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration  / TIMER_CYCLE;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer2+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer2+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer2+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	20000064 	.word	0x20000064
 80001e4:	20000068 	.word	0x20000068

080001e8 <timerRun>:
void timerRun(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <timerRun+0x6c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	dd0b      	ble.n	800020c <timerRun+0x24>
		timer0_counter--;
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <timerRun+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <timerRun+0x6c>)
 80001fc:	6013      	str	r3, [r2, #0]
		if(timer0_counter == 0) timer0_flag = 1;
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <timerRun+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d102      	bne.n	800020c <timerRun+0x24>
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <timerRun+0x70>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
	}
	if(timer1_counter > 0){
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <timerRun+0x74>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dd0b      	ble.n	800022c <timerRun+0x44>
		timer1_counter--;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <timerRun+0x74>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3b01      	subs	r3, #1
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <timerRun+0x74>)
 800021c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <timerRun+0x74>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d102      	bne.n	800022c <timerRun+0x44>
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <timerRun+0x78>)
 8000228:	2201      	movs	r2, #1
 800022a:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <timerRun+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	dd0b      	ble.n	800024c <timerRun+0x64>
		timer2_counter--;
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <timerRun+0x7c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3b01      	subs	r3, #1
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <timerRun+0x7c>)
 800023c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <timerRun+0x7c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d102      	bne.n	800024c <timerRun+0x64>
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <timerRun+0x80>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
	}
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000054 	.word	0x20000054
 8000258:	20000058 	.word	0x20000058
 800025c:	2000005c 	.word	0x2000005c
 8000260:	20000060 	.word	0x20000060
 8000264:	20000064 	.word	0x20000064
 8000268:	20000068 	.word	0x20000068

0800026c <display>:

void display(GPIO_PinState a, GPIO_PinState b, GPIO_PinState c,
		GPIO_PinState d, GPIO_PinState e, GPIO_PinState f,GPIO_PinState g) {
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4604      	mov	r4, r0
 8000274:	4608      	mov	r0, r1
 8000276:	4611      	mov	r1, r2
 8000278:	461a      	mov	r2, r3
 800027a:	4623      	mov	r3, r4
 800027c:	71fb      	strb	r3, [r7, #7]
 800027e:	4603      	mov	r3, r0
 8000280:	71bb      	strb	r3, [r7, #6]
 8000282:	460b      	mov	r3, r1
 8000284:	717b      	strb	r3, [r7, #5]
 8000286:	4613      	mov	r3, r2
 8000288:	713b      	strb	r3, [r7, #4]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, a);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	461a      	mov	r2, r3
 800028e:	2101      	movs	r1, #1
 8000290:	4815      	ldr	r0, [pc, #84]	; (80002e8 <display+0x7c>)
 8000292:	f001 fcfd 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, b);
 8000296:	79bb      	ldrb	r3, [r7, #6]
 8000298:	461a      	mov	r2, r3
 800029a:	2102      	movs	r1, #2
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <display+0x7c>)
 800029e:	f001 fcf7 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, c);
 80002a2:	797b      	ldrb	r3, [r7, #5]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2104      	movs	r1, #4
 80002a8:	480f      	ldr	r0, [pc, #60]	; (80002e8 <display+0x7c>)
 80002aa:	f001 fcf1 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, d);
 80002ae:	793b      	ldrb	r3, [r7, #4]
 80002b0:	461a      	mov	r2, r3
 80002b2:	2108      	movs	r1, #8
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <display+0x7c>)
 80002b6:	f001 fceb 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, e);
 80002ba:	7e3b      	ldrb	r3, [r7, #24]
 80002bc:	461a      	mov	r2, r3
 80002be:	2110      	movs	r1, #16
 80002c0:	4809      	ldr	r0, [pc, #36]	; (80002e8 <display+0x7c>)
 80002c2:	f001 fce5 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, f);
 80002c6:	7f3b      	ldrb	r3, [r7, #28]
 80002c8:	461a      	mov	r2, r3
 80002ca:	2120      	movs	r1, #32
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <display+0x7c>)
 80002ce:	f001 fcdf 	bl	8001c90 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, g);
 80002d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80002d6:	461a      	mov	r2, r3
 80002d8:	2140      	movs	r1, #64	; 0x40
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <display+0x7c>)
 80002dc:	f001 fcd8 	bl	8001c90 <HAL_GPIO_WritePin>
  }
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd90      	pop	{r4, r7, pc}
 80002e8:	40010c00 	.word	0x40010c00

080002ec <display7SEG>:

void display7SEG(int state){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b086      	sub	sp, #24
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2b09      	cmp	r3, #9
 80002f8:	f200 809a 	bhi.w	8000430 <display7SEG+0x144>
 80002fc:	a201      	add	r2, pc, #4	; (adr r2, 8000304 <display7SEG+0x18>)
 80002fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000302:	bf00      	nop
 8000304:	0800032d 	.word	0x0800032d
 8000308:	08000347 	.word	0x08000347
 800030c:	08000361 	.word	0x08000361
 8000310:	0800037b 	.word	0x0800037b
 8000314:	08000395 	.word	0x08000395
 8000318:	080003af 	.word	0x080003af
 800031c:	080003c9 	.word	0x080003c9
 8000320:	080003e3 	.word	0x080003e3
 8000324:	080003fd 	.word	0x080003fd
 8000328:	08000417 	.word	0x08000417
    switch (state) {
        case 0:
            display(0, 0, 0, 0, 0, 0, 1);
 800032c:	2301      	movs	r3, #1
 800032e:	9302      	str	r3, [sp, #8]
 8000330:	2300      	movs	r3, #0
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	2300      	movs	r3, #0
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2300      	movs	r3, #0
 800033a:	2200      	movs	r2, #0
 800033c:	2100      	movs	r1, #0
 800033e:	2000      	movs	r0, #0
 8000340:	f7ff ff94 	bl	800026c <display>
            break;
 8000344:	e081      	b.n	800044a <display7SEG+0x15e>
        case 1:
            display(1, 0, 0, 1, 1, 1, 1);
 8000346:	2301      	movs	r3, #1
 8000348:	9302      	str	r3, [sp, #8]
 800034a:	2301      	movs	r3, #1
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2301      	movs	r3, #1
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ff87 	bl	800026c <display>
            break;
 800035e:	e074      	b.n	800044a <display7SEG+0x15e>
        case 2:
            display(0, 0, 1, 0, 0, 1, 0);
 8000360:	2300      	movs	r3, #0
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	2301      	movs	r3, #1
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	2300      	movs	r3, #0
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2300      	movs	r3, #0
 800036e:	2201      	movs	r2, #1
 8000370:	2100      	movs	r1, #0
 8000372:	2000      	movs	r0, #0
 8000374:	f7ff ff7a 	bl	800026c <display>
            break;
 8000378:	e067      	b.n	800044a <display7SEG+0x15e>
        case 3:
            display(0, 0, 0, 0, 1, 1, 0);
 800037a:	2300      	movs	r3, #0
 800037c:	9302      	str	r3, [sp, #8]
 800037e:	2301      	movs	r3, #1
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2301      	movs	r3, #1
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2300      	movs	r3, #0
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff6d 	bl	800026c <display>
            break;
 8000392:	e05a      	b.n	800044a <display7SEG+0x15e>
        case 4:
            display(1, 0, 0, 1, 1, 0, 0);
 8000394:	2300      	movs	r3, #0
 8000396:	9302      	str	r3, [sp, #8]
 8000398:	2300      	movs	r3, #0
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	2301      	movs	r3, #1
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2301      	movs	r3, #1
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	2001      	movs	r0, #1
 80003a8:	f7ff ff60 	bl	800026c <display>
            break;
 80003ac:	e04d      	b.n	800044a <display7SEG+0x15e>
        case 5:
            display(0, 1, 0, 0, 1, 0, 0);
 80003ae:	2300      	movs	r3, #0
 80003b0:	9302      	str	r3, [sp, #8]
 80003b2:	2300      	movs	r3, #0
 80003b4:	9301      	str	r3, [sp, #4]
 80003b6:	2301      	movs	r3, #1
 80003b8:	9300      	str	r3, [sp, #0]
 80003ba:	2300      	movs	r3, #0
 80003bc:	2200      	movs	r2, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff ff53 	bl	800026c <display>
            break;
 80003c6:	e040      	b.n	800044a <display7SEG+0x15e>
        case 6:
            display(0, 1, 0, 0, 0, 0, 0);
 80003c8:	2300      	movs	r3, #0
 80003ca:	9302      	str	r3, [sp, #8]
 80003cc:	2300      	movs	r3, #0
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	2300      	movs	r3, #0
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2300      	movs	r3, #0
 80003d6:	2200      	movs	r2, #0
 80003d8:	2101      	movs	r1, #1
 80003da:	2000      	movs	r0, #0
 80003dc:	f7ff ff46 	bl	800026c <display>
            break;
 80003e0:	e033      	b.n	800044a <display7SEG+0x15e>
        case 7:
            display(0, 0, 0, 1, 1, 1, 1);
 80003e2:	2301      	movs	r3, #1
 80003e4:	9302      	str	r3, [sp, #8]
 80003e6:	2301      	movs	r3, #1
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	2301      	movs	r3, #1
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	2301      	movs	r3, #1
 80003f0:	2200      	movs	r2, #0
 80003f2:	2100      	movs	r1, #0
 80003f4:	2000      	movs	r0, #0
 80003f6:	f7ff ff39 	bl	800026c <display>
            break;
 80003fa:	e026      	b.n	800044a <display7SEG+0x15e>
        case 8:
            display(0, 0, 0, 0, 0, 0, 0);
 80003fc:	2300      	movs	r3, #0
 80003fe:	9302      	str	r3, [sp, #8]
 8000400:	2300      	movs	r3, #0
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	2300      	movs	r3, #0
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	2300      	movs	r3, #0
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	2000      	movs	r0, #0
 8000410:	f7ff ff2c 	bl	800026c <display>
            break;
 8000414:	e019      	b.n	800044a <display7SEG+0x15e>
        case 9:
            display(0, 0, 0, 0, 1, 0, 0);
 8000416:	2300      	movs	r3, #0
 8000418:	9302      	str	r3, [sp, #8]
 800041a:	2300      	movs	r3, #0
 800041c:	9301      	str	r3, [sp, #4]
 800041e:	2301      	movs	r3, #1
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	2300      	movs	r3, #0
 8000424:	2200      	movs	r2, #0
 8000426:	2100      	movs	r1, #0
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ff1f 	bl	800026c <display>
            break;
 800042e:	e00c      	b.n	800044a <display7SEG+0x15e>
        default:
            display(1, 1, 1, 1, 1, 1, 1);
 8000430:	2301      	movs	r3, #1
 8000432:	9302      	str	r3, [sp, #8]
 8000434:	2301      	movs	r3, #1
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	2301      	movs	r3, #1
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2301      	movs	r3, #1
 800043e:	2201      	movs	r2, #1
 8000440:	2101      	movs	r1, #1
 8000442:	2001      	movs	r0, #1
 8000444:	f7ff ff12 	bl	800026c <display>
        }
}
 8000448:	bf00      	nop
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop

08000454 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1 , 2 , 3 , 4};
void update7SEG ( int index ) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b03      	cmp	r3, #3
 8000460:	f200 8084 	bhi.w	800056c <update7SEG+0x118>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <update7SEG+0x18>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	0800047d 	.word	0x0800047d
 8000470:	080004b9 	.word	0x080004b9
 8000474:	080004f5 	.word	0x080004f5
 8000478:	08000531 	.word	0x08000531
    switch ( index ) {
        case 0:
            //Display the first 7 SEG with led_buffer [0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	483d      	ldr	r0, [pc, #244]	; (8000578 <update7SEG+0x124>)
 8000482:	f001 fc05 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000486:	2201      	movs	r2, #1
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	483b      	ldr	r0, [pc, #236]	; (8000578 <update7SEG+0x124>)
 800048c:	f001 fc00 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	4838      	ldr	r0, [pc, #224]	; (8000578 <update7SEG+0x124>)
 8000498:	f001 fbfa 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a2:	4835      	ldr	r0, [pc, #212]	; (8000578 <update7SEG+0x124>)
 80004a4:	f001 fbf4 	bl	8001c90 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 80004a8:	4a34      	ldr	r2, [pc, #208]	; (800057c <update7SEG+0x128>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff1b 	bl	80002ec <display7SEG>
            break ;
 80004b6:	e05a      	b.n	800056e <update7SEG+0x11a>
        case 1:
            // Display the second 7 SEG with led_buffer [1]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	482e      	ldr	r0, [pc, #184]	; (8000578 <update7SEG+0x124>)
 80004be:	f001 fbe7 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2180      	movs	r1, #128	; 0x80
 80004c6:	482c      	ldr	r0, [pc, #176]	; (8000578 <update7SEG+0x124>)
 80004c8:	f001 fbe2 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d2:	4829      	ldr	r0, [pc, #164]	; (8000578 <update7SEG+0x124>)
 80004d4:	f001 fbdc 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	4826      	ldr	r0, [pc, #152]	; (8000578 <update7SEG+0x124>)
 80004e0:	f001 fbd6 	bl	8001c90 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 80004e4:	4a25      	ldr	r2, [pc, #148]	; (800057c <update7SEG+0x128>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fefd 	bl	80002ec <display7SEG>
        	break ;
 80004f2:	e03c      	b.n	800056e <update7SEG+0x11a>
        case 2:
            // Display the third 7 SEG with led_buffer [2]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2140      	movs	r1, #64	; 0x40
 80004f8:	481f      	ldr	r0, [pc, #124]	; (8000578 <update7SEG+0x124>)
 80004fa:	f001 fbc9 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <update7SEG+0x124>)
 8000504:	f001 fbc4 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050e:	481a      	ldr	r0, [pc, #104]	; (8000578 <update7SEG+0x124>)
 8000510:	f001 fbbe 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4817      	ldr	r0, [pc, #92]	; (8000578 <update7SEG+0x124>)
 800051c:	f001 fbb8 	bl	8001c90 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 8000520:	4a16      	ldr	r2, [pc, #88]	; (800057c <update7SEG+0x128>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fedf 	bl	80002ec <display7SEG>
        	break ;
 800052e:	e01e      	b.n	800056e <update7SEG+0x11a>
        case 3:
            // Display the forth 7 SEG with led_buffer [3]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <update7SEG+0x124>)
 8000536:	f001 fbab 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800053a:	2201      	movs	r2, #1
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	480e      	ldr	r0, [pc, #56]	; (8000578 <update7SEG+0x124>)
 8000540:	f001 fba6 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <update7SEG+0x124>)
 800054c:	f001 fba0 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <update7SEG+0x124>)
 8000558:	f001 fb9a 	bl	8001c90 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[index]);
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <update7SEG+0x128>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fec1 	bl	80002ec <display7SEG>
            break ;
 800056a:	e000      	b.n	800056e <update7SEG+0x11a>
        default :
            break ;}
 800056c:	bf00      	nop
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010800 	.word	0x40010800
 800057c:	20000010 	.word	0x20000010

08000580 <updateClockBuffer>:

void updateClockBuffer (){
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
	led_buffer[0] = hour / 10;
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <updateClockBuffer+0x70>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a1a      	ldr	r2, [pc, #104]	; (80005f4 <updateClockBuffer+0x74>)
 800058a:	fb82 1203 	smull	r1, r2, r2, r3
 800058e:	1092      	asrs	r2, r2, #2
 8000590:	17db      	asrs	r3, r3, #31
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <updateClockBuffer+0x78>)
 8000596:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour - 10 * ( hour / 10) ;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <updateClockBuffer+0x70>)
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <updateClockBuffer+0x74>)
 800059e:	fb83 2301 	smull	r2, r3, r3, r1
 80005a2:	109a      	asrs	r2, r3, #2
 80005a4:	17cb      	asrs	r3, r1, #31
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	1aca      	subs	r2, r1, r3
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <updateClockBuffer+0x78>)
 80005b4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute / 10;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <updateClockBuffer+0x7c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <updateClockBuffer+0x74>)
 80005bc:	fb82 1203 	smull	r1, r2, r2, r3
 80005c0:	1092      	asrs	r2, r2, #2
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <updateClockBuffer+0x78>)
 80005c8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute - 10 * (minute / 10);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <updateClockBuffer+0x7c>)
 80005cc:	6819      	ldr	r1, [r3, #0]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <updateClockBuffer+0x74>)
 80005d0:	fb83 2301 	smull	r2, r3, r3, r1
 80005d4:	109a      	asrs	r2, r3, #2
 80005d6:	17cb      	asrs	r3, r1, #31
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	1aca      	subs	r2, r1, r3
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <updateClockBuffer+0x78>)
 80005e6:	60da      	str	r2, [r3, #12]
 }
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000
 80005f4:	66666667 	.word	0x66666667
 80005f8:	20000010 	.word	0x20000010
 80005fc:	20000004 	.word	0x20000004

08000600 <displayLedMatrix>:


void displayLedMatrix(int row, uint8_t col){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	if(row == 0) { // enable row 0
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	f040 80ab 	bne.w	800076a <displayLedMatrix+0x16a>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061a:	48be      	ldr	r0, [pc, #760]	; (8000914 <displayLedMatrix+0x314>)
 800061c:	f001 fb38 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	48bb      	ldr	r0, [pc, #748]	; (8000914 <displayLedMatrix+0x314>)
 8000628:	f001 fb32 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	48b8      	ldr	r0, [pc, #736]	; (8000914 <displayLedMatrix+0x314>)
 8000634:	f001 fb2c 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800063e:	48b5      	ldr	r0, [pc, #724]	; (8000914 <displayLedMatrix+0x314>)
 8000640:	f001 fb26 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064a:	48b2      	ldr	r0, [pc, #712]	; (8000914 <displayLedMatrix+0x314>)
 800064c:	f001 fb20 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000656:	48af      	ldr	r0, [pc, #700]	; (8000914 <displayLedMatrix+0x314>)
 8000658:	f001 fb1a 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000662:	48ac      	ldr	r0, [pc, #688]	; (8000914 <displayLedMatrix+0x314>)
 8000664:	f001 fb14 	bl	8001c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800066e:	48a9      	ldr	r0, [pc, #676]	; (8000914 <displayLedMatrix+0x314>)
 8000670:	f001 fb0e 	bl	8001c90 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000674:	78fb      	ldrb	r3, [r7, #3]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
 8000684:	461a      	mov	r2, r3
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	48a3      	ldr	r0, [pc, #652]	; (8000918 <displayLedMatrix+0x318>)
 800068c:	f001 fb00 	bl	8001c90 <HAL_GPIO_WritePin>
		//lay gia tri cua bit nho nhat bang cach and voi 1
		col = col >> 1;
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	70fb      	strb	r3, [r7, #3]
		//shift sang phai de lay gia tri cua bit tiep theo
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000696:	78fb      	ldrb	r3, [r7, #3]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf0c      	ite	eq
 80006a0:	2301      	moveq	r3, #1
 80006a2:	2300      	movne	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ac:	489a      	ldr	r0, [pc, #616]	; (8000918 <displayLedMatrix+0x318>)
 80006ae:	f001 faef 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	085b      	lsrs	r3, r3, #1
 80006b6:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	2b00      	cmp	r3, #0
 80006c0:	bf0c      	ite	eq
 80006c2:	2301      	moveq	r3, #1
 80006c4:	2300      	movne	r3, #0
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ce:	4892      	ldr	r0, [pc, #584]	; (8000918 <displayLedMatrix+0x318>)
 80006d0:	f001 fade 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	085b      	lsrs	r3, r3, #1
 80006d8:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf0c      	ite	eq
 80006e4:	2301      	moveq	r3, #1
 80006e6:	2300      	movne	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4889      	ldr	r0, [pc, #548]	; (8000918 <displayLedMatrix+0x318>)
 80006f2:	f001 facd 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	085b      	lsrs	r3, r3, #1
 80006fa:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf0c      	ite	eq
 8000706:	2301      	moveq	r3, #1
 8000708:	2300      	movne	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000712:	4881      	ldr	r0, [pc, #516]	; (8000918 <displayLedMatrix+0x318>)
 8000714:	f001 fabc 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	085b      	lsrs	r3, r3, #1
 800071c:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf0c      	ite	eq
 8000728:	2301      	moveq	r3, #1
 800072a:	2300      	movne	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	461a      	mov	r2, r3
 8000730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000734:	4878      	ldr	r0, [pc, #480]	; (8000918 <displayLedMatrix+0x318>)
 8000736:	f001 faab 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	085b      	lsrs	r3, r3, #1
 800073e:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	2108      	movs	r1, #8
 8000754:	4870      	ldr	r0, [pc, #448]	; (8000918 <displayLedMatrix+0x318>)
 8000756:	f001 fa9b 	bl	8001c90 <HAL_GPIO_WritePin>
		col = col >> 1;
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1);
 8000760:	2201      	movs	r2, #1
 8000762:	2104      	movs	r1, #4
 8000764:	486c      	ldr	r0, [pc, #432]	; (8000918 <displayLedMatrix+0x318>)
 8000766:	f001 fa93 	bl	8001c90 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
	}
	if(row == 1) { // enable row 1
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	f040 80b3 	bne.w	80008d8 <displayLedMatrix+0x2d8>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	4866      	ldr	r0, [pc, #408]	; (8000914 <displayLedMatrix+0x314>)
 800077a:	f001 fa89 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000784:	4863      	ldr	r0, [pc, #396]	; (8000914 <displayLedMatrix+0x314>)
 8000786:	f001 fa83 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000790:	4860      	ldr	r0, [pc, #384]	; (8000914 <displayLedMatrix+0x314>)
 8000792:	f001 fa7d 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079c:	485d      	ldr	r0, [pc, #372]	; (8000914 <displayLedMatrix+0x314>)
 800079e:	f001 fa77 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	485a      	ldr	r0, [pc, #360]	; (8000914 <displayLedMatrix+0x314>)
 80007aa:	f001 fa71 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b4:	4857      	ldr	r0, [pc, #348]	; (8000914 <displayLedMatrix+0x314>)
 80007b6:	f001 fa6b 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007c0:	4854      	ldr	r0, [pc, #336]	; (8000914 <displayLedMatrix+0x314>)
 80007c2:	f001 fa65 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	4851      	ldr	r0, [pc, #324]	; (8000914 <displayLedMatrix+0x314>)
 80007ce:	f001 fa5f 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	bf0c      	ite	eq
 80007dc:	2301      	moveq	r3, #1
 80007de:	2300      	movne	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e8:	484b      	ldr	r0, [pc, #300]	; (8000918 <displayLedMatrix+0x318>)
 80007ea:	f001 fa51 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	4843      	ldr	r0, [pc, #268]	; (8000918 <displayLedMatrix+0x318>)
 800080c:	f001 fa40 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	085b      	lsrs	r3, r3, #1
 8000814:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000816:	78fb      	ldrb	r3, [r7, #3]
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082c:	483a      	ldr	r0, [pc, #232]	; (8000918 <displayLedMatrix+0x318>)
 800082e:	f001 fa2f 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	bf0c      	ite	eq
 8000842:	2301      	moveq	r3, #1
 8000844:	2300      	movne	r3, #0
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084e:	4832      	ldr	r0, [pc, #200]	; (8000918 <displayLedMatrix+0x318>)
 8000850:	f001 fa1e 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	085b      	lsrs	r3, r3, #1
 8000858:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf0c      	ite	eq
 8000864:	2301      	moveq	r3, #1
 8000866:	2300      	movne	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000870:	4829      	ldr	r0, [pc, #164]	; (8000918 <displayLedMatrix+0x318>)
 8000872:	f001 fa0d 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000892:	4821      	ldr	r0, [pc, #132]	; (8000918 <displayLedMatrix+0x318>)
 8000894:	f001 f9fc 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	085b      	lsrs	r3, r3, #1
 800089c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 800089e:	78fb      	ldrb	r3, [r7, #3]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf0c      	ite	eq
 80008a8:	2301      	moveq	r3, #1
 80008aa:	2300      	movne	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	2108      	movs	r1, #8
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <displayLedMatrix+0x318>)
 80008b4:	f001 f9ec 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1 - (col & 1));
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf0c      	ite	eq
 80008c8:	2301      	moveq	r3, #1
 80008ca:	2300      	movne	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	461a      	mov	r2, r3
 80008d0:	2104      	movs	r1, #4
 80008d2:	4811      	ldr	r0, [pc, #68]	; (8000918 <displayLedMatrix+0x318>)
 80008d4:	f001 f9dc 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 1) { // enable row 2
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	f040 80b8 	bne.w	8000a50 <displayLedMatrix+0x450>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <displayLedMatrix+0x314>)
 80008e8:	f001 f9d2 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <displayLedMatrix+0x314>)
 80008f4:	f001 f9cc 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <displayLedMatrix+0x314>)
 8000900:	f001 f9c6 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	4802      	ldr	r0, [pc, #8]	; (8000914 <displayLedMatrix+0x314>)
 800090c:	f001 f9c0 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	e003      	b.n	800091c <displayLedMatrix+0x31c>
 8000914:	40010c00 	.word	0x40010c00
 8000918:	40010800 	.word	0x40010800
 800091c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000920:	48bd      	ldr	r0, [pc, #756]	; (8000c18 <displayLedMatrix+0x618>)
 8000922:	f001 f9b5 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	48ba      	ldr	r0, [pc, #744]	; (8000c18 <displayLedMatrix+0x618>)
 800092e:	f001 f9af 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000938:	48b7      	ldr	r0, [pc, #732]	; (8000c18 <displayLedMatrix+0x618>)
 800093a:	f001 f9a9 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000944:	48b4      	ldr	r0, [pc, #720]	; (8000c18 <displayLedMatrix+0x618>)
 8000946:	f001 f9a3 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 800094a:	78fb      	ldrb	r3, [r7, #3]
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000960:	48ae      	ldr	r0, [pc, #696]	; (8000c1c <displayLedMatrix+0x61c>)
 8000962:	f001 f995 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	2b00      	cmp	r3, #0
 8000974:	bf0c      	ite	eq
 8000976:	2301      	moveq	r3, #1
 8000978:	2300      	movne	r3, #0
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	48a6      	ldr	r0, [pc, #664]	; (8000c1c <displayLedMatrix+0x61c>)
 8000984:	f001 f984 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	bf0c      	ite	eq
 8000998:	2301      	moveq	r3, #1
 800099a:	2300      	movne	r3, #0
 800099c:	b2db      	uxtb	r3, r3
 800099e:	461a      	mov	r2, r3
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	489d      	ldr	r0, [pc, #628]	; (8000c1c <displayLedMatrix+0x61c>)
 80009a6:	f001 f973 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 80009b0:	78fb      	ldrb	r3, [r7, #3]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	461a      	mov	r2, r3
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	4895      	ldr	r0, [pc, #596]	; (8000c1c <displayLedMatrix+0x61c>)
 80009c8:	f001 f962 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 80009d2:	78fb      	ldrb	r3, [r7, #3]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf0c      	ite	eq
 80009dc:	2301      	moveq	r3, #1
 80009de:	2300      	movne	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e8:	488c      	ldr	r0, [pc, #560]	; (8000c1c <displayLedMatrix+0x61c>)
 80009ea:	f001 f951 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 80009f4:	78fb      	ldrb	r3, [r7, #3]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf0c      	ite	eq
 80009fe:	2301      	moveq	r3, #1
 8000a00:	2300      	movne	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0a:	4884      	ldr	r0, [pc, #528]	; (8000c1c <displayLedMatrix+0x61c>)
 8000a0c:	f001 f940 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bf0c      	ite	eq
 8000a20:	2301      	moveq	r3, #1
 8000a22:	2300      	movne	r3, #0
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	2108      	movs	r1, #8
 8000a2a:	487c      	ldr	r0, [pc, #496]	; (8000c1c <displayLedMatrix+0x61c>)
 8000a2c:	f001 f930 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000a36:	78fb      	ldrb	r3, [r7, #3]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf0c      	ite	eq
 8000a40:	2301      	moveq	r3, #1
 8000a42:	2300      	movne	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4874      	ldr	r0, [pc, #464]	; (8000c1c <displayLedMatrix+0x61c>)
 8000a4c:	f001 f920 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 3) { // enable row 3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	f040 80b3 	bne.w	8000bbe <displayLedMatrix+0x5be>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5e:	486e      	ldr	r0, [pc, #440]	; (8000c18 <displayLedMatrix+0x618>)
 8000a60:	f001 f916 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6a:	486b      	ldr	r0, [pc, #428]	; (8000c18 <displayLedMatrix+0x618>)
 8000a6c:	f001 f910 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a76:	4868      	ldr	r0, [pc, #416]	; (8000c18 <displayLedMatrix+0x618>)
 8000a78:	f001 f90a 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	4865      	ldr	r0, [pc, #404]	; (8000c18 <displayLedMatrix+0x618>)
 8000a84:	f001 f904 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	4862      	ldr	r0, [pc, #392]	; (8000c18 <displayLedMatrix+0x618>)
 8000a90:	f001 f8fe 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9a:	485f      	ldr	r0, [pc, #380]	; (8000c18 <displayLedMatrix+0x618>)
 8000a9c:	f001 f8f8 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	485c      	ldr	r0, [pc, #368]	; (8000c18 <displayLedMatrix+0x618>)
 8000aa8:	f001 f8f2 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab2:	4859      	ldr	r0, [pc, #356]	; (8000c18 <displayLedMatrix+0x618>)
 8000ab4:	f001 f8ec 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000ab8:	78fb      	ldrb	r3, [r7, #3]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ace:	4853      	ldr	r0, [pc, #332]	; (8000c1c <displayLedMatrix+0x61c>)
 8000ad0:	f001 f8de 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf0c      	ite	eq
 8000ae4:	2301      	moveq	r3, #1
 8000ae6:	2300      	movne	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	461a      	mov	r2, r3
 8000aec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af0:	484a      	ldr	r0, [pc, #296]	; (8000c1c <displayLedMatrix+0x61c>)
 8000af2:	f001 f8cd 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	085b      	lsrs	r3, r3, #1
 8000afa:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4842      	ldr	r0, [pc, #264]	; (8000c1c <displayLedMatrix+0x61c>)
 8000b14:	f001 f8bc 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	4839      	ldr	r0, [pc, #228]	; (8000c1c <displayLedMatrix+0x61c>)
 8000b36:	f001 f8ab 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b56:	4831      	ldr	r0, [pc, #196]	; (8000c1c <displayLedMatrix+0x61c>)
 8000b58:	f001 f89a 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	085b      	lsrs	r3, r3, #1
 8000b60:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	4828      	ldr	r0, [pc, #160]	; (8000c1c <displayLedMatrix+0x61c>)
 8000b7a:	f001 f889 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	085b      	lsrs	r3, r3, #1
 8000b82:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf0c      	ite	eq
 8000b8e:	2301      	moveq	r3, #1
 8000b90:	2300      	movne	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	2108      	movs	r1, #8
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <displayLedMatrix+0x61c>)
 8000b9a:	f001 f879 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	085b      	lsrs	r3, r3, #1
 8000ba2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf0c      	ite	eq
 8000bae:	2301      	moveq	r3, #1
 8000bb0:	2300      	movne	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	4818      	ldr	r0, [pc, #96]	; (8000c1c <displayLedMatrix+0x61c>)
 8000bba:	f001 f869 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 4) { // enable row 4
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	f040 80b9 	bne.w	8000d38 <displayLedMatrix+0x738>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <displayLedMatrix+0x618>)
 8000bce:	f001 f85f 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <displayLedMatrix+0x618>)
 8000bda:	f001 f859 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <displayLedMatrix+0x618>)
 8000be6:	f001 f853 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <displayLedMatrix+0x618>)
 8000bf2:	f001 f84d 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <displayLedMatrix+0x618>)
 8000bfe:	f001 f847 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <displayLedMatrix+0x618>)
 8000c0a:	f001 f841 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c14:	e004      	b.n	8000c20 <displayLedMatrix+0x620>
 8000c16:	bf00      	nop
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	48bc      	ldr	r0, [pc, #752]	; (8000f14 <displayLedMatrix+0x914>)
 8000c22:	f001 f835 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	48b9      	ldr	r0, [pc, #740]	; (8000f14 <displayLedMatrix+0x914>)
 8000c2e:	f001 f82f 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf0c      	ite	eq
 8000c3c:	2301      	moveq	r3, #1
 8000c3e:	2300      	movne	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c48:	48b3      	ldr	r0, [pc, #716]	; (8000f18 <displayLedMatrix+0x918>)
 8000c4a:	f001 f821 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6a:	48ab      	ldr	r0, [pc, #684]	; (8000f18 <displayLedMatrix+0x918>)
 8000c6c:	f001 f810 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf0c      	ite	eq
 8000c80:	2301      	moveq	r3, #1
 8000c82:	2300      	movne	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	48a2      	ldr	r0, [pc, #648]	; (8000f18 <displayLedMatrix+0x918>)
 8000c8e:	f000 ffff 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	085b      	lsrs	r3, r3, #1
 8000c96:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	489a      	ldr	r0, [pc, #616]	; (8000f18 <displayLedMatrix+0x918>)
 8000cb0:	f000 ffee 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cb4:	78fb      	ldrb	r3, [r7, #3]
 8000cb6:	085b      	lsrs	r3, r3, #1
 8000cb8:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2301      	moveq	r3, #1
 8000cc6:	2300      	movne	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd0:	4891      	ldr	r0, [pc, #580]	; (8000f18 <displayLedMatrix+0x918>)
 8000cd2:	f000 ffdd 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bf0c      	ite	eq
 8000ce6:	2301      	moveq	r3, #1
 8000ce8:	2300      	movne	r3, #0
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf2:	4889      	ldr	r0, [pc, #548]	; (8000f18 <displayLedMatrix+0x918>)
 8000cf4:	f000 ffcc 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	085b      	lsrs	r3, r3, #1
 8000cfc:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf0c      	ite	eq
 8000d08:	2301      	moveq	r3, #1
 8000d0a:	2300      	movne	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2108      	movs	r1, #8
 8000d12:	4881      	ldr	r0, [pc, #516]	; (8000f18 <displayLedMatrix+0x918>)
 8000d14:	f000 ffbc 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	085b      	lsrs	r3, r3, #1
 8000d1c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf0c      	ite	eq
 8000d28:	2301      	moveq	r3, #1
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	2104      	movs	r1, #4
 8000d32:	4879      	ldr	r0, [pc, #484]	; (8000f18 <displayLedMatrix+0x918>)
 8000d34:	f000 ffac 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 5) { // enable row 5
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b05      	cmp	r3, #5
 8000d3c:	f040 80b3 	bne.w	8000ea6 <displayLedMatrix+0x8a6>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	4873      	ldr	r0, [pc, #460]	; (8000f14 <displayLedMatrix+0x914>)
 8000d48:	f000 ffa2 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d52:	4870      	ldr	r0, [pc, #448]	; (8000f14 <displayLedMatrix+0x914>)
 8000d54:	f000 ff9c 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	486d      	ldr	r0, [pc, #436]	; (8000f14 <displayLedMatrix+0x914>)
 8000d60:	f000 ff96 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d6a:	486a      	ldr	r0, [pc, #424]	; (8000f14 <displayLedMatrix+0x914>)
 8000d6c:	f000 ff90 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d76:	4867      	ldr	r0, [pc, #412]	; (8000f14 <displayLedMatrix+0x914>)
 8000d78:	f000 ff8a 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d82:	4864      	ldr	r0, [pc, #400]	; (8000f14 <displayLedMatrix+0x914>)
 8000d84:	f000 ff84 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8e:	4861      	ldr	r0, [pc, #388]	; (8000f14 <displayLedMatrix+0x914>)
 8000d90:	f000 ff7e 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9a:	485e      	ldr	r0, [pc, #376]	; (8000f14 <displayLedMatrix+0x914>)
 8000d9c:	f000 ff78 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf0c      	ite	eq
 8000daa:	2301      	moveq	r3, #1
 8000dac:	2300      	movne	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
 8000db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db6:	4858      	ldr	r0, [pc, #352]	; (8000f18 <displayLedMatrix+0x918>)
 8000db8:	f000 ff6a 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	bf0c      	ite	eq
 8000dcc:	2301      	moveq	r3, #1
 8000dce:	2300      	movne	r3, #0
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	484f      	ldr	r0, [pc, #316]	; (8000f18 <displayLedMatrix+0x918>)
 8000dda:	f000 ff59 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bf0c      	ite	eq
 8000dee:	2301      	moveq	r3, #1
 8000df0:	2300      	movne	r3, #0
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	461a      	mov	r2, r3
 8000df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfa:	4847      	ldr	r0, [pc, #284]	; (8000f18 <displayLedMatrix+0x918>)
 8000dfc:	f000 ff48 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	085b      	lsrs	r3, r3, #1
 8000e04:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1c:	483e      	ldr	r0, [pc, #248]	; (8000f18 <displayLedMatrix+0x918>)
 8000e1e:	f000 ff37 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	085b      	lsrs	r3, r3, #1
 8000e26:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e3e:	4836      	ldr	r0, [pc, #216]	; (8000f18 <displayLedMatrix+0x918>)
 8000e40:	f000 ff26 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e60:	482d      	ldr	r0, [pc, #180]	; (8000f18 <displayLedMatrix+0x918>)
 8000e62:	f000 ff15 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	085b      	lsrs	r3, r3, #1
 8000e6a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf0c      	ite	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	2300      	movne	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4825      	ldr	r0, [pc, #148]	; (8000f18 <displayLedMatrix+0x918>)
 8000e82:	f000 ff05 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	bf0c      	ite	eq
 8000e96:	2301      	moveq	r3, #1
 8000e98:	2300      	movne	r3, #0
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	481d      	ldr	r0, [pc, #116]	; (8000f18 <displayLedMatrix+0x918>)
 8000ea2:	f000 fef5 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 6) { // enable row 6
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	f040 80b9 	bne.w	8001020 <displayLedMatrix+0xa20>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <displayLedMatrix+0x914>)
 8000eb6:	f000 feeb 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <displayLedMatrix+0x914>)
 8000ec2:	f000 fee5 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <displayLedMatrix+0x914>)
 8000ece:	f000 fedf 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <displayLedMatrix+0x914>)
 8000eda:	f000 fed9 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <displayLedMatrix+0x914>)
 8000ee6:	f000 fed3 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <displayLedMatrix+0x914>)
 8000ef2:	f000 fecd 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <displayLedMatrix+0x914>)
 8000efe:	f000 fec7 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <displayLedMatrix+0x914>)
 8000f0a:	f000 fec1 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	e004      	b.n	8000f1c <displayLedMatrix+0x91c>
 8000f12:	bf00      	nop
 8000f14:	40010c00 	.word	0x40010c00
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f30:	4899      	ldr	r0, [pc, #612]	; (8001198 <displayLedMatrix+0xb98>)
 8000f32:	f000 fead 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f52:	4891      	ldr	r0, [pc, #580]	; (8001198 <displayLedMatrix+0xb98>)
 8000f54:	f000 fe9c 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	085b      	lsrs	r3, r3, #1
 8000f5c:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f74:	4888      	ldr	r0, [pc, #544]	; (8001198 <displayLedMatrix+0xb98>)
 8000f76:	f000 fe8b 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f96:	4880      	ldr	r0, [pc, #512]	; (8001198 <displayLedMatrix+0xb98>)
 8000f98:	f000 fe7a 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb8:	4877      	ldr	r0, [pc, #476]	; (8001198 <displayLedMatrix+0xb98>)
 8000fba:	f000 fe69 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	486f      	ldr	r0, [pc, #444]	; (8001198 <displayLedMatrix+0xb98>)
 8000fdc:	f000 fe58 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4867      	ldr	r0, [pc, #412]	; (8001198 <displayLedMatrix+0xb98>)
 8000ffc:	f000 fe48 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	085b      	lsrs	r3, r3, #1
 8001004:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	2104      	movs	r1, #4
 800101a:	485f      	ldr	r0, [pc, #380]	; (8001198 <displayLedMatrix+0xb98>)
 800101c:	f000 fe38 	bl	8001c90 <HAL_GPIO_WritePin>
		}
	if(row == 7) { // enable row 7
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b07      	cmp	r3, #7
 8001024:	f040 80b3 	bne.w	800118e <displayLedMatrix+0xb8e>
			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	485b      	ldr	r0, [pc, #364]	; (800119c <displayLedMatrix+0xb9c>)
 8001030:	f000 fe2e 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103a:	4858      	ldr	r0, [pc, #352]	; (800119c <displayLedMatrix+0xb9c>)
 800103c:	f000 fe28 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001046:	4855      	ldr	r0, [pc, #340]	; (800119c <displayLedMatrix+0xb9c>)
 8001048:	f000 fe22 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001052:	4852      	ldr	r0, [pc, #328]	; (800119c <displayLedMatrix+0xb9c>)
 8001054:	f000 fe1c 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	484f      	ldr	r0, [pc, #316]	; (800119c <displayLedMatrix+0xb9c>)
 8001060:	f000 fe16 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	484c      	ldr	r0, [pc, #304]	; (800119c <displayLedMatrix+0xb9c>)
 800106c:	f000 fe10 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4849      	ldr	r0, [pc, #292]	; (800119c <displayLedMatrix+0xb9c>)
 8001078:	f000 fe0a 	bl	8001c90 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001082:	4846      	ldr	r0, [pc, #280]	; (800119c <displayLedMatrix+0xb9c>)
 8001084:	f000 fe04 	bl	8001c90 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1 - (col & 1));
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109e:	483e      	ldr	r0, [pc, #248]	; (8001198 <displayLedMatrix+0xb98>)
 80010a0:	f000 fdf6 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1 - (col & 1));
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c0:	4835      	ldr	r0, [pc, #212]	; (8001198 <displayLedMatrix+0xb98>)
 80010c2:	f000 fde5 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1 - (col & 1));
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf0c      	ite	eq
 80010d6:	2301      	moveq	r3, #1
 80010d8:	2300      	movne	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <displayLedMatrix+0xb98>)
 80010e4:	f000 fdd4 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1 - (col & 1));
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001104:	4824      	ldr	r0, [pc, #144]	; (8001198 <displayLedMatrix+0xb98>)
 8001106:	f000 fdc3 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1 - (col & 1));
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <displayLedMatrix+0xb98>)
 8001128:	f000 fdb2 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1 - (col & 1));
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf0c      	ite	eq
 800113c:	2301      	moveq	r3, #1
 800113e:	2300      	movne	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <displayLedMatrix+0xb98>)
 800114a:	f000 fda1 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1 - (col & 1));
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	2108      	movs	r1, #8
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <displayLedMatrix+0xb98>)
 800116a:	f000 fd91 	bl	8001c90 <HAL_GPIO_WritePin>
			col = col >> 1;
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	70fb      	strb	r3, [r7, #3]
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin,  1 - (col & 1));
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	2104      	movs	r1, #4
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <displayLedMatrix+0xb98>)
 800118a:	f000 fd81 	bl	8001c90 <HAL_GPIO_WritePin>
		}

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40010800 	.word	0x40010800
 800119c:	40010c00 	.word	0x40010c00

080011a0 <updateLedMatrix>:

int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x18,0x24,0x42,0x42,0x7e,0x42,0x42,0x42};
/*moi phan tu cua ma tran dai dien cho 1 row. VD: 0x18 doi ra nhi phan la 00011000 la row dau tien cua chu 'A', neu ket hop tat ca lai se thanh chu 'A'*/
void updateLedMatrix(int index) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d84a      	bhi.n	8001244 <updateLedMatrix+0xa4>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <updateLedMatrix+0x14>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011d5 	.word	0x080011d5
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080011ff 	.word	0x080011ff
 80011c4:	0800120d 	.word	0x0800120d
 80011c8:	0800121b 	.word	0x0800121b
 80011cc:	08001229 	.word	0x08001229
 80011d0:	08001237 	.word	0x08001237
	switch(index) {
	case 0:// display row 0 of led matrix
		displayLedMatrix(0, matrix_buffer[0]);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <updateLedMatrix+0xb0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fa10 	bl	8000600 <displayLedMatrix>
		break;
 80011e0:	e031      	b.n	8001246 <updateLedMatrix+0xa6>
	case 1:// display row 1 of led matrix
		displayLedMatrix(1, matrix_buffer[1]);
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <updateLedMatrix+0xb0>)
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fa09 	bl	8000600 <displayLedMatrix>
		break;
 80011ee:	e02a      	b.n	8001246 <updateLedMatrix+0xa6>
	case 2:// display row 2 of led matrix
		displayLedMatrix(2, matrix_buffer[2]);
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <updateLedMatrix+0xb0>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2002      	movs	r0, #2
 80011f8:	f7ff fa02 	bl	8000600 <displayLedMatrix>
		break;
 80011fc:	e023      	b.n	8001246 <updateLedMatrix+0xa6>
	case 3:// display row 3 of led matrix
		displayLedMatrix(3, matrix_buffer[3]);
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <updateLedMatrix+0xb0>)
 8001200:	78db      	ldrb	r3, [r3, #3]
 8001202:	4619      	mov	r1, r3
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff f9fb 	bl	8000600 <displayLedMatrix>
		break;
 800120a:	e01c      	b.n	8001246 <updateLedMatrix+0xa6>
	case 4:// display row 4 of led matrix
		displayLedMatrix(4, matrix_buffer[4]);
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <updateLedMatrix+0xb0>)
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	4619      	mov	r1, r3
 8001212:	2004      	movs	r0, #4
 8001214:	f7ff f9f4 	bl	8000600 <displayLedMatrix>
		break;
 8001218:	e015      	b.n	8001246 <updateLedMatrix+0xa6>
	case 5:// display row 5 of led matrix
		displayLedMatrix(5, matrix_buffer[5]);
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <updateLedMatrix+0xb0>)
 800121c:	795b      	ldrb	r3, [r3, #5]
 800121e:	4619      	mov	r1, r3
 8001220:	2005      	movs	r0, #5
 8001222:	f7ff f9ed 	bl	8000600 <displayLedMatrix>
		break;
 8001226:	e00e      	b.n	8001246 <updateLedMatrix+0xa6>
	case 6:// display row 6 of led matrix
		displayLedMatrix(6, matrix_buffer[6]);
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <updateLedMatrix+0xb0>)
 800122a:	799b      	ldrb	r3, [r3, #6]
 800122c:	4619      	mov	r1, r3
 800122e:	2006      	movs	r0, #6
 8001230:	f7ff f9e6 	bl	8000600 <displayLedMatrix>
		break;
 8001234:	e007      	b.n	8001246 <updateLedMatrix+0xa6>
	case 7:// display row 7 of led matrix
		displayLedMatrix(7, matrix_buffer[7]);
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <updateLedMatrix+0xb0>)
 8001238:	79db      	ldrb	r3, [r3, #7]
 800123a:	4619      	mov	r1, r3
 800123c:	2007      	movs	r0, #7
 800123e:	f7ff f9df 	bl	8000600 <displayLedMatrix>
		break;
 8001242:	e000      	b.n	8001246 <updateLedMatrix+0xa6>
	default:
		break;
 8001244:	bf00      	nop
	}

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000024 	.word	0x20000024

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125a:	f000 fa2f 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125e:	f000 f88b 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001262:	f000 f911 	bl	8001488 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001266:	f000 f8c3 	bl	80013f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800126a:	4839      	ldr	r0, [pc, #228]	; (8001350 <main+0xfc>)
 800126c:	f001 f96e 	bl	800254c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  	//Set timer for 7ledSeg
    setTimer0(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f7fe ff6b 	bl	800014c <setTimer0>
    //Set timer for DOT
    setTimer1(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f7fe ff82 	bl	8000180 <setTimer1>
    //Set timer for led matrix
    setTimer2 (100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f7fe ff99 	bl	80001b4 <setTimer2>
    int index_led = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
    while (1)
    {
    	if(timer0_flag==1){
 8001286:	4b33      	ldr	r3, [pc, #204]	; (8001354 <main+0x100>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d134      	bne.n	80012f8 <main+0xa4>
    	  		  setTimer0(1000);
 800128e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001292:	f7fe ff5b 	bl	800014c <setTimer0>
    	  		  second++;
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <main+0x104>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <main+0x104>)
 800129e:	6013      	str	r3, [r2, #0]
    	  		  if ( second >= 60) {
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <main+0x104>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b3b      	cmp	r3, #59	; 0x3b
 80012a6:	dd07      	ble.n	80012b8 <main+0x64>
    	  			  second = 0;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <main+0x104>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
    	  			  minute ++;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <main+0x108>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a29      	ldr	r2, [pc, #164]	; (800135c <main+0x108>)
 80012b6:	6013      	str	r3, [r2, #0]
    	  		  }
    	  		  if( minute >= 60) {
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <main+0x108>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b3b      	cmp	r3, #59	; 0x3b
 80012be:	dd07      	ble.n	80012d0 <main+0x7c>
    	  			  minute = 0;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <main+0x108>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
    	  			  hour ++;
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <main+0x10c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <main+0x10c>)
 80012ce:	6013      	str	r3, [r2, #0]
    	  		  }
    	  		  if( hour >=24) {
 80012d0:	4b23      	ldr	r3, [pc, #140]	; (8001360 <main+0x10c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b17      	cmp	r3, #23
 80012d6:	dd02      	ble.n	80012de <main+0x8a>
    	  			  hour = 0;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <main+0x10c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
    	  		  }
    	  		  updateClockBuffer();
 80012de:	f7ff f94f 	bl	8000580 <updateClockBuffer>
    	  		  update7SEG(index_led);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff f8b6 	bl	8000454 <update7SEG>
    	  		  index_led++;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	607b      	str	r3, [r7, #4]
    	  		  if(index_led >= 4) index_led = 0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	dd01      	ble.n	80012f8 <main+0xa4>
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
    	  }
    	  if(timer1_flag == 1){
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <main+0x110>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d10b      	bne.n	8001318 <main+0xc4>
    		  setTimer1(1000);
 8001300:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001304:	f7fe ff3c 	bl	8000180 <setTimer1>
    		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8001308:	2110      	movs	r1, #16
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <main+0x114>)
 800130c:	f000 fcd8 	bl	8001cc0 <HAL_GPIO_TogglePin>
    		  HAL_GPIO_TogglePin(Led_red_GPIO_Port, Led_red_Pin);
 8001310:	2120      	movs	r1, #32
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <main+0x114>)
 8001314:	f000 fcd4 	bl	8001cc0 <HAL_GPIO_TogglePin>
    	  }
    	  if(timer2_flag == 1){
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <main+0x118>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d1b2      	bne.n	8001286 <main+0x32>
    		  setTimer2(200);
 8001320:	20c8      	movs	r0, #200	; 0xc8
 8001322:	f7fe ff47 	bl	80001b4 <setTimer2>
    		  updateLedMatrix(index_led_matrix);
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <main+0x11c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff38 	bl	80011a0 <updateLedMatrix>
    		  index_led_matrix ++;
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <main+0x11c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3301      	adds	r3, #1
 8001336:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <main+0x11c>)
 8001338:	6013      	str	r3, [r2, #0]
    		  if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <main+0x11c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <main+0x120>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d19f      	bne.n	8001286 <main+0x32>
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <main+0x11c>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
    	if(timer0_flag==1){
 800134c:	e79b      	b.n	8001286 <main+0x32>
 800134e:	bf00      	nop
 8001350:	20000070 	.word	0x20000070
 8001354:	20000058 	.word	0x20000058
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004
 8001360:	20000000 	.word	0x20000000
 8001364:	20000060 	.word	0x20000060
 8001368:	40010800 	.word	0x40010800
 800136c:	20000068 	.word	0x20000068
 8001370:	2000006c 	.word	0x2000006c
 8001374:	20000020 	.word	0x20000020

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2228      	movs	r2, #40	; 0x28
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fc90 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a2:	2310      	movs	r3, #16
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fca0 	bl	8001cf4 <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013ba:	f000 f8c5 	bl	8001548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013be:	230f      	movs	r3, #15
 80013c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 ff0c 	bl	80021f4 <HAL_RCC_ClockConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013e2:	f000 f8b1 	bl	8001548 <Error_Handler>
  }
}
 80013e6:	bf00      	nop
 80013e8:	3740      	adds	r7, #64	; 0x40
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_TIM2_Init+0x94>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_TIM2_Init+0x94>)
 8001416:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800141a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_TIM2_Init+0x94>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_TIM2_Init+0x94>)
 8001424:	2209      	movs	r2, #9
 8001426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_TIM2_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM2_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <MX_TIM2_Init+0x94>)
 8001436:	f001 f839 	bl	80024ac <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001440:	f000 f882 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM2_Init+0x94>)
 8001452:	f001 f9b7 	bl	80027c4 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800145c:	f000 f874 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_TIM2_Init+0x94>)
 800146e:	f001 fb8f 	bl	8002b90 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001478:	f000 f866 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000070 	.word	0x20000070

08001488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_GPIO_Init+0xa0>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <MX_GPIO_Init+0xa0>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_GPIO_Init+0xa0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_GPIO_Init+0xa0>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <MX_GPIO_Init+0xa0>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_GPIO_Init+0xa0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|Led_red_Pin
 80014cc:	2200      	movs	r2, #0
 80014ce:	f64f 31fc 	movw	r1, #64508	; 0xfbfc
 80014d2:	4816      	ldr	r0, [pc, #88]	; (800152c <MX_GPIO_Init+0xa4>)
 80014d4:	f000 fbdc 	bl	8001c90 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin
                          |ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|ROW2_Pin
 80014d8:	2200      	movs	r2, #0
 80014da:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_GPIO_Init+0xa8>)
 80014e0:	f000 fbd6 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM3_Pin ENM4_Pin ENM5_Pin ENM6_Pin
                           ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|Led_red_Pin
 80014e4:	f64f 33fc 	movw	r3, #64508	; 0xfbfc
 80014e8:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM3_Pin|ENM4_Pin|ENM5_Pin|ENM6_Pin
                          |ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2302      	movs	r3, #2
 80014f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <MX_GPIO_Init+0xa4>)
 80014fe:	f000 fa4d 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin PB3 PB4 PB5
                           PB6 ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|ROW2_Pin
 8001502:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001506:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2302      	movs	r3, #2
 8001512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_GPIO_Init+0xa8>)
 800151c:	f000 fa3e 	bl	800199c <HAL_GPIO_Init>
//  GPIO_InitStruct.Pin = ENM2_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(ENM2_GPIO_Port, &GPIO_InitStruct);

}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	40010800 	.word	0x40010800
 8001530:	40010c00 	.word	0x40010c00

08001534 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	timerRun();
 800153c:	f7fe fe54 	bl	80001e8 <timerRun>

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <HAL_MspInit+0x5c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x5c>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_MspInit+0x5c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_MspInit+0x5c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_MspInit+0x60>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <HAL_MspInit+0x60>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c8:	d113      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_TIM_Base_MspInit+0x44>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_TIM_Base_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_TIM_Base_MspInit+0x44>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	201c      	movs	r0, #28
 80015e8:	f000 f9a1 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ec:	201c      	movs	r0, #28
 80015ee:	f000 f9ba 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001646:	f000 f87f 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f000 ffc5 	bl	80025e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000070 	.word	0x20000070

08001664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff fff8 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800168c:	4c09      	ldr	r4, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f001 fae3 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fdd9 	bl	8001254 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80016ac:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 80016b0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80016b4:	200000bc 	.word	0x200000bc

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x28>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f923 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff ff3c 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f93b 	bl	8001982 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f903 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000002c 	.word	0x2000002c
 8001740:	20000034 	.word	0x20000034
 8001744:	20000030 	.word	0x20000030

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_IncTick+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000034 	.word	0x20000034
 8001768:	200000b8 	.word	0x200000b8

0800176c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	200000b8 	.word	0x200000b8

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4906      	ldr	r1, [pc, #24]	; (8001818 <__NVIC_EnableIRQ+0x34>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff2d 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff42 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff35 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e148      	b.n	8001c42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b0:	2201      	movs	r2, #1
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8137 	bne.w	8001c3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4aa3      	ldr	r2, [pc, #652]	; (8001c60 <HAL_GPIO_Init+0x2c4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d05e      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019d8:	4aa1      	ldr	r2, [pc, #644]	; (8001c60 <HAL_GPIO_Init+0x2c4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d875      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019de:	4aa1      	ldr	r2, [pc, #644]	; (8001c64 <HAL_GPIO_Init+0x2c8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d058      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019e4:	4a9f      	ldr	r2, [pc, #636]	; (8001c64 <HAL_GPIO_Init+0x2c8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d86f      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019ea:	4a9f      	ldr	r2, [pc, #636]	; (8001c68 <HAL_GPIO_Init+0x2cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d052      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019f0:	4a9d      	ldr	r2, [pc, #628]	; (8001c68 <HAL_GPIO_Init+0x2cc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d869      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 80019f6:	4a9d      	ldr	r2, [pc, #628]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d04c      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 80019fc:	4a9b      	ldr	r2, [pc, #620]	; (8001c6c <HAL_GPIO_Init+0x2d0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d863      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a02:	4a9b      	ldr	r2, [pc, #620]	; (8001c70 <HAL_GPIO_Init+0x2d4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d046      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
 8001a08:	4a99      	ldr	r2, [pc, #612]	; (8001c70 <HAL_GPIO_Init+0x2d4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d85d      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a0e:	2b12      	cmp	r3, #18
 8001a10:	d82a      	bhi.n	8001a68 <HAL_GPIO_Init+0xcc>
 8001a12:	2b12      	cmp	r3, #18
 8001a14:	d859      	bhi.n	8001aca <HAL_GPIO_Init+0x12e>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <HAL_GPIO_Init+0x80>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a97 	.word	0x08001a97
 8001a20:	08001a71 	.word	0x08001a71
 8001a24:	08001a83 	.word	0x08001a83
 8001a28:	08001ac5 	.word	0x08001ac5
 8001a2c:	08001acb 	.word	0x08001acb
 8001a30:	08001acb 	.word	0x08001acb
 8001a34:	08001acb 	.word	0x08001acb
 8001a38:	08001acb 	.word	0x08001acb
 8001a3c:	08001acb 	.word	0x08001acb
 8001a40:	08001acb 	.word	0x08001acb
 8001a44:	08001acb 	.word	0x08001acb
 8001a48:	08001acb 	.word	0x08001acb
 8001a4c:	08001acb 	.word	0x08001acb
 8001a50:	08001acb 	.word	0x08001acb
 8001a54:	08001acb 	.word	0x08001acb
 8001a58:	08001acb 	.word	0x08001acb
 8001a5c:	08001acb 	.word	0x08001acb
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a8d 	.word	0x08001a8d
 8001a68:	4a82      	ldr	r2, [pc, #520]	; (8001c74 <HAL_GPIO_Init+0x2d8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a6e:	e02c      	b.n	8001aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	623b      	str	r3, [r7, #32]
          break;
 8001a76:	e029      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	623b      	str	r3, [r7, #32]
          break;
 8001a80:	e024      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	3308      	adds	r3, #8
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e01f      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	330c      	adds	r3, #12
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e01a      	b.n	8001acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	623b      	str	r3, [r7, #32]
          break;
 8001aa2:	e013      	b.n	8001acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d105      	bne.n	8001ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aac:	2308      	movs	r3, #8
 8001aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	611a      	str	r2, [r3, #16]
          break;
 8001ab6:	e009      	b.n	8001acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	615a      	str	r2, [r3, #20]
          break;
 8001ac2:	e003      	b.n	8001acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x130>
          break;
 8001aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2bff      	cmp	r3, #255	; 0xff
 8001ad0:	d801      	bhi.n	8001ad6 <HAL_GPIO_Init+0x13a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	e001      	b.n	8001ada <HAL_GPIO_Init+0x13e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2bff      	cmp	r3, #255	; 0xff
 8001ae0:	d802      	bhi.n	8001ae8 <HAL_GPIO_Init+0x14c>
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x152>
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	3b08      	subs	r3, #8
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	210f      	movs	r1, #15
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	401a      	ands	r2, r3
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8090 	beq.w	8001c3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a55      	ldr	r2, [pc, #340]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_GPIO_Init+0x2dc>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_GPIO_Init+0x2e0>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <HAL_GPIO_Init+0x2e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1e0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_GPIO_Init+0x2e8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1dc>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1d8>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1e2>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1e2>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1e2>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b8e:	493b      	ldr	r1, [pc, #236]	; (8001c7c <HAL_GPIO_Init+0x2e0>)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4937      	ldr	r1, [pc, #220]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	4933      	ldr	r1, [pc, #204]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	492d      	ldr	r1, [pc, #180]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4929      	ldr	r1, [pc, #164]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4923      	ldr	r1, [pc, #140]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	491f      	ldr	r1, [pc, #124]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4919      	ldr	r1, [pc, #100]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4915      	ldr	r1, [pc, #84]	; (8001c8c <HAL_GPIO_Init+0x2f0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3301      	adds	r3, #1
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f aeaf 	bne.w	80019b0 <HAL_GPIO_Init+0x14>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	372c      	adds	r7, #44	; 0x2c
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	10320000 	.word	0x10320000
 8001c64:	10310000 	.word	0x10310000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10210000 	.word	0x10210000
 8001c70:	10120000 	.word	0x10120000
 8001c74:	10110000 	.word	0x10110000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010800 	.word	0x40010800
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43d9      	mvns	r1, r3
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	611a      	str	r2, [r3, #16]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e26c      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	4b92      	ldr	r3, [pc, #584]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d20:	4b8f      	ldr	r3, [pc, #572]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
 8001d2c:	4b8c      	ldr	r3, [pc, #560]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	4b89      	ldr	r3, [pc, #548]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x12c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d168      	bne.n	8001e20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e246      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x76>
 8001d5c:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x98>
 8001d72:	4b7b      	ldr	r3, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7a      	ldr	r2, [pc, #488]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xbc>
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd4>
 8001db0:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fccc 	bl	800176c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fcc8 	bl	800176c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1fa      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe4>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fcb8 	bl	800176c <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fcb4 	bl	800176c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1e6      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x10c>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b4c      	ldr	r3, [pc, #304]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1ba      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4939      	ldr	r1, [pc, #228]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fc6d 	bl	800176c <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fc69 	bl	800176c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e19b      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc4c 	bl	800176c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc48 	bl	800176c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e17a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d03a      	beq.n	8001f78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7ff fc2c 	bl	800176c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc28 	bl	800176c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e15a      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f000 fa9a 	bl	8002470 <RCC_Delay>
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_OscConfig+0x274>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff fc12 	bl	800176c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4a:	e00f      	b.n	8001f6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fc0e 	bl	800176c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d908      	bls.n	8001f6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e140      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	42420000 	.word	0x42420000
 8001f68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b9e      	ldr	r3, [pc, #632]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e9      	bne.n	8001f4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a6 	beq.w	80020d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b97      	ldr	r3, [pc, #604]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10d      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b94      	ldr	r3, [pc, #592]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a93      	ldr	r2, [pc, #588]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]
 8001fa2:	4b91      	ldr	r3, [pc, #580]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d118      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fbe:	4b8b      	ldr	r3, [pc, #556]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a8a      	ldr	r2, [pc, #552]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fca:	f7ff fbcf 	bl	800176c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd2:	f7ff fbcb 	bl	800176c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b64      	cmp	r3, #100	; 0x64
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0fd      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b81      	ldr	r3, [pc, #516]	; (80021ec <HAL_RCC_OscConfig+0x4f8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x312>
 8001ff8:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4a7a      	ldr	r2, [pc, #488]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6213      	str	r3, [r2, #32]
 8002004:	e02d      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x334>
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a72      	ldr	r2, [pc, #456]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	e01c      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x356>
 8002030:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a6c      	ldr	r2, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x36e>
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a66      	ldr	r2, [pc, #408]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b64      	ldr	r3, [pc, #400]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a63      	ldr	r2, [pc, #396]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb7f 	bl	800176c <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff fb7b 	bl	800176c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0ab      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCC_OscConfig+0x37e>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff fb69 	bl	800176c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff fb65 	bl	800176c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e095      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a47      	ldr	r2, [pc, #284]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8081 	beq.w	80021de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	4b42      	ldr	r3, [pc, #264]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d061      	beq.n	80021ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d146      	bne.n	800217e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff fb39 	bl	800176c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff fb35 	bl	800176c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e067      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	492d      	ldr	r1, [pc, #180]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a19      	ldr	r1, [r3, #32]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	430b      	orrs	r3, r1
 800214a:	4927      	ldr	r1, [pc, #156]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff fb09 	bl	800176c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215e:	f7ff fb05 	bl	800176c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e037      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x46a>
 800217c:	e02f      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_OscConfig+0x4fc>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff faf2 	bl	800176c <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff faee 	bl	800176c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e020      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x498>
 80021aa:	e018      	b.n	80021de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e013      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
 80021f0:	42420060 	.word	0x42420060

080021f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d0      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b67      	ldr	r3, [pc, #412]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4965      	ldr	r1, [pc, #404]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b63      	ldr	r3, [pc, #396]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0b8      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002250:	4b59      	ldr	r3, [pc, #356]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800225a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a52      	ldr	r2, [pc, #328]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	494d      	ldr	r1, [pc, #308]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d040      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d107      	bne.n	80022aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d115      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e07f      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e073      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3d      	ldr	r3, [pc, #244]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4936      	ldr	r1, [pc, #216]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff fa42 	bl	800176c <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff fa3e 	bl	800176c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e053      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d210      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4922      	ldr	r1, [pc, #136]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e032      	b.n	80023aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002382:	f000 f821 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1cc>)
 800239c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1d0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f9a0 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08002cd4 	.word	0x08002cd4
 80023c0:	2000002c 	.word	0x2000002c
 80023c4:	20000030 	.word	0x20000030

080023c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023e2:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_RCC_GetSysClockFreq+0x94>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x30>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x36>
 80023f6:	e027      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	613b      	str	r3, [r7, #16]
      break;
 80023fc:	e027      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0c9b      	lsrs	r3, r3, #18
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_GetSysClockFreq+0x94>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	0c5b      	lsrs	r3, r3, #17
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 800242a:	fb02 f203 	mul.w	r2, r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e004      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a0c      	ldr	r2, [pc, #48]	; (800246c <HAL_RCC_GetSysClockFreq+0xa4>)
 800243c:	fb02 f303 	mul.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	613b      	str	r3, [r7, #16]
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x98>)
 800244a:	613b      	str	r3, [r7, #16]
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	693b      	ldr	r3, [r7, #16]
}
 8002450:	4618      	mov	r0, r3
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	007a1200 	.word	0x007a1200
 8002464:	08002ce4 	.word	0x08002ce4
 8002468:	08002cf4 	.word	0x08002cf4
 800246c:	003d0900 	.word	0x003d0900

08002470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <RCC_Delay+0x34>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <RCC_Delay+0x38>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0a5b      	lsrs	r3, r3, #9
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800248c:	bf00      	nop
  }
  while (Delay --);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	60fa      	str	r2, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f9      	bne.n	800248c <RCC_Delay+0x1c>
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	2000002c 	.word	0x2000002c
 80024a8:	10624dd3 	.word	0x10624dd3

080024ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e041      	b.n	8002542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff f870 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f000 fa56 	bl	800299c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	d001      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e035      	b.n	80025d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a16      	ldr	r2, [pc, #88]	; (80025dc <HAL_TIM_Base_Start_IT+0x90>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x4e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258e:	d004      	beq.n	800259a <HAL_TIM_Base_Start_IT+0x4e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d010      	beq.n	80025ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025bc:	e007      	b.n	80025ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40000400 	.word	0x40000400

080025e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0202 	mvn.w	r2, #2
 8002618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f998 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f98b 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f99a 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d020      	beq.n	8002694 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0204 	mvn.w	r2, #4
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f972 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f965 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f974 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d020      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0208 	mvn.w	r2, #8
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2204      	movs	r2, #4
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f94c 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f93f 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f94e 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d020      	beq.n	800272c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0210 	mvn.w	r2, #16
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2208      	movs	r2, #8
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f926 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f919 	bl	8002952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f928 	bl	8002976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0201 	mvn.w	r2, #1
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fef2 	bl	8001534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa6f 	bl	8002c52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00c      	beq.n	8002798 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f8f8 	bl	8002988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0220 	mvn.w	r2, #32
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fa42 	bl	8002c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_TIM_ConfigClockSource+0x1c>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0b4      	b.n	800294a <HAL_TIM_ConfigClockSource+0x186>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002818:	d03e      	beq.n	8002898 <HAL_TIM_ConfigClockSource+0xd4>
 800281a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800281e:	f200 8087 	bhi.w	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	f000 8086 	beq.w	8002936 <HAL_TIM_ConfigClockSource+0x172>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d87f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b70      	cmp	r3, #112	; 0x70
 8002832:	d01a      	beq.n	800286a <HAL_TIM_ConfigClockSource+0xa6>
 8002834:	2b70      	cmp	r3, #112	; 0x70
 8002836:	d87b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b60      	cmp	r3, #96	; 0x60
 800283a:	d050      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x11a>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d877      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b50      	cmp	r3, #80	; 0x50
 8002842:	d03c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xfa>
 8002844:	2b50      	cmp	r3, #80	; 0x50
 8002846:	d873      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d058      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x13a>
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d86f      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b30      	cmp	r3, #48	; 0x30
 8002852:	d064      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002854:	2b30      	cmp	r3, #48	; 0x30
 8002856:	d86b      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d060      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b20      	cmp	r3, #32
 800285e:	d867      	bhi.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05c      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b10      	cmp	r3, #16
 8002866:	d05a      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x15a>
 8002868:	e062      	b.n	8002930 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f000 f96a 	bl	8002b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800288c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	609a      	str	r2, [r3, #8]
      break;
 8002896:	e04f      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f000 f953 	bl	8002b52 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ba:	609a      	str	r2, [r3, #8]
      break;
 80028bc:	e03c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 f8ca 	bl	8002a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f921 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028dc:	e02c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f8e8 	bl	8002ac0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2160      	movs	r1, #96	; 0x60
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f911 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 80028fc:	e01c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8aa 	bl	8002a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f901 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 800291c:	e00c      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4610      	mov	r0, r2
 800292a:	f000 f8f8 	bl	8002b1e <TIM_ITRx_SetConfig>
      break;
 800292e:	e003      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e000      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a2b      	ldr	r2, [pc, #172]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x28>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x28>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a28      	ldr	r2, [pc, #160]	; (8002a60 <TIM_Base_SetConfig+0xc4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d007      	beq.n	80029ee <TIM_Base_SetConfig+0x52>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d003      	beq.n	80029ee <TIM_Base_SetConfig+0x52>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <TIM_Base_SetConfig+0xc4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d108      	bne.n	8002a00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <TIM_Base_SetConfig+0xc0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f023 0201 	bic.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]
  }
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400

08002a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0201 	bic.w	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 030a 	bic.w	r3, r3, #10
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	621a      	str	r2, [r3, #32]
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0210 	bic.w	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	031b      	lsls	r3, r3, #12
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	621a      	str	r2, [r3, #32]
}
 8002b14:	bf00      	nop
 8002b16:	371c      	adds	r7, #28
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr

08002b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f043 0307 	orr.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b087      	sub	sp, #28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	609a      	str	r2, [r3, #8]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e041      	b.n	8002c2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf4:	d004      	beq.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10c      	bne.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400

08002c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	2600      	movs	r6, #0
 8002c68:	4d0c      	ldr	r5, [pc, #48]	; (8002c9c <__libc_init_array+0x38>)
 8002c6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6c:	1b64      	subs	r4, r4, r5
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	42a6      	cmp	r6, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	f000 f822 	bl	8002cbc <_init>
 8002c78:	2600      	movs	r6, #0
 8002c7a:	4d0a      	ldr	r5, [pc, #40]	; (8002ca4 <__libc_init_array+0x40>)
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <__libc_init_array+0x44>)
 8002c7e:	1b64      	subs	r4, r4, r5
 8002c80:	10a4      	asrs	r4, r4, #2
 8002c82:	42a6      	cmp	r6, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8c:	4798      	blx	r3
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c96:	4798      	blx	r3
 8002c98:	3601      	adds	r6, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08002cf8 	.word	0x08002cf8
 8002ca0:	08002cf8 	.word	0x08002cf8
 8002ca4:	08002cf8 	.word	0x08002cf8
 8002ca8:	08002cfc 	.word	0x08002cfc

08002cac <memset>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	4402      	add	r2, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
